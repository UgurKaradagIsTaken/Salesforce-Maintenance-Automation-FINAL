@istest
public with sharing class MaintenanceRequestHelperTest {
    
    // Define constants to be used in the test methods
    private static final String STATUS_NEW = 'New';
    private static final String WORKING = 'Working';
    private static final String CLOSED = 'Closed';
    private static final String REPAIR = 'Repair';
    private static final String REQUEST_ORIGIN = 'Web';
    private static final String REQUEST_TYPE = 'Routine Maintenance';
    private static final String REQUEST_SUBJECT = 'Testing subject';
    
    // Method to create a Vehicle__c record with a name of 'SuperTruck'
    private static Vehicle__c createVehicle(){
        Vehicle__c Vehicle = new Vehicle__C(name = 'SuperTruck');
        return Vehicle;
    }
    
    // Method to create a Product2 record with a name of 'SuperEquipment', a lifespan of 10 months, a maintenance cycle of 10 months, and a replacement part checkbox of true
    private static Product2 createEq(){
        product2 equipment = new product2(name = 'SuperEquipment',
                                         lifespan_months__C = 10,
                                         maintenance_cycle__C = 10,
                                         replacement_part__c = true);
        return equipment;
    }
    
    // Method to create a Case record with a type of 'Repair', a status of 'New', an origin of 'Web', a subject of 'Testing subject', an equipment ID, and a vehicle ID
    private static Case createMaintenanceRequest(id vehicleId, id equipmentId){
        case cs = new case(Type=REPAIR,
                          Status=STATUS_NEW,
                          Origin=REQUEST_ORIGIN,
                          Subject=REQUEST_SUBJECT,
                          Equipment__c=equipmentId,
                          Vehicle__c=vehicleId);
        return cs;
    }
    
    // Method to create an Equipment_Maintenance_Item__c record with an equipment ID and a maintenance request ID
    private static Equipment_Maintenance_Item__c createWorkPart(id equipmentId,id requestId){
        Equipment_Maintenance_Item__c wp = new Equipment_Maintenance_Item__c(Equipment__c = equipmentId,
                                                                            Maintenance_Request__c = requestId);
        return wp;
    }
}
// Test case for positive scenario of maintenance request creation and update

// Create a new vehicle and insert it into the database
Vehicle__c vehicle = createVehicle();
insert vehicle;

// Get the ID of the newly created vehicle
id vehicleId = vehicle.Id;

// Create a new equipment and insert it into the database
Product2 equipment = createEq();
insert equipment;

// Get the ID of the newly created equipment
id equipmentId = equipment.Id;

// Create a new maintenance request for the vehicle and equipment
case somethingToUpdate = createMaintenanceRequest(vehicleId,equipmentId);
insert somethingToUpdate;

// Create a new work part for the equipment and maintenance request
Equipment_Maintenance_Item__c workP = createWorkPart(equipmentId,somethingToUpdate.id);
insert workP;

// Update the status of the maintenance request to "Closed"
test.startTest();
somethingToUpdate.status = CLOSED;
update somethingToUpdate;
test.stopTest();

// Retrieve the newly updated maintenance request
Case newReq = [Select id, subject, type, Equipment__c, Date_Reported__c, Vehicle__c, Date_Due__c
from case
where status =:STATUS_NEW];

// Retrieve the work part for the maintenance request
Equipment_Maintenance_Item__c workPart = [select id
from Equipment_Maintenance_Item__c
where Maintenance_Request__c =:newReq.Id];

// Assert that the work part exists and the maintenance request has the correct values
system.assert(workPart != null);
system.assert(newReq.Subject != null);
system.assertEquals(newReq.Type, REQUEST_TYPE);
SYSTEM.assertEquals(newReq.Equipment__c, equipmentId);
SYSTEM.assertEquals(newReq.Vehicle__c, vehicleId);
SYSTEM.assertEquals(newReq.Date_Reported__c, system.today());
@istest
private static void testMaintenanceRequestPositive(){
    // create a new vehicle record
    Vehicle__c vehicle = createVehicle();
    insert vehicle;
    id vehicleId = vehicle.Id;
    
    // create a new equipment record
    Product2 equipment = createEq();
    insert equipment;
    id equipmentId = equipment.Id;
    
    // create a new maintenance request for the vehicle and equipment
    case somethingToUpdate = createMaintenanceRequest(vehicleId,equipmentId);
    insert somethingToUpdate;
    
    // create a new maintenance item record for the equipment and maintenance request
    Equipment_Maintenance_Item__c workP = createWorkPart(equipmentId,somethingToUpdate.id);
    insert workP;
    
    // update the maintenance request status to "Closed"
    test.startTest();
    somethingToUpdate.status = CLOSED;
    update somethingToUpdate;
    test.stopTest();
    
    // retrieve the new maintenance request record and maintenance item record
    Case newReq = [Select id, subject, type, Equipment__c, Date_Reported__c, Vehicle__c, Date_Due__c
                  from case
                  where status =:STATUS_NEW];
    Equipment_Maintenance_Item__c workPart = [select id
                                             from Equipment_Maintenance_Item__c
                                             where Maintenance_Request__c =:newReq.Id];
    
    // assert that the maintenance item record and maintenance request fields are as expected
    system.assert(workPart != null);
    system.assert(newReq.Subject != null);
    system.assertEquals(newReq.Type, REQUEST_TYPE);
    SYSTEM.assertEquals(newReq.Equipment__c, equipmentId);
    SYSTEM.assertEquals(newReq.Vehicle__c, vehicleId);
    SYSTEM.assertEquals(newReq.Date_Reported__c, system.today());
}
@istest
private static void testMaintenanceRequestNegative(){
    // Create a test Vehicle record
    Vehicle__C vehicle = createVehicle();
    insert vehicle;
    id vehicleId = vehicle.Id;
    
    // Create a test Equipment record
    product2 equipment = createEq();
    insert equipment;
    id equipmentId = equipment.Id;
    
    // Create a new Maintenance Request with the test Vehicle and Equipment
    case emptyReq = createMaintenanceRequest(vehicleId,equipmentId);
    insert emptyReq;
    
    // Create a new Equipment Maintenance Item associated with the Maintenance Request
    Equipment_Maintenance_Item__c workP = createWorkPart(equipmentId, emptyReq.Id);
    insert workP;
    
    // Attempt to update the status of the Maintenance Request to 'Working'
    test.startTest();
    emptyReq.Status = WORKING;
    update emptyReq;
    test.stopTest();
    
    // Verify that the Equipment Maintenance Item was created, but the Maintenance Request was not updated
    list<case> allRequest = [select id 
                             from case];
    
    Equipment_Maintenance_Item__c workPart = [select id 
                                              from Equipment_Maintenance_Item__c 
                                              where Maintenance_Request__c = :emptyReq.Id];
    
    system.assert(workPart != null);
    system.assert(allRequest.size() == 1);
}
@istest
private static void testMaintenanceRequestBulk(){
    // Creating lists for vehicles, equipment, work parts, requests, and request IDs
    list<Vehicle__C> vehicleList = new list<Vehicle__C>();
    list<Product2> equipmentList = new list<Product2>();
    list<Equipment_Maintenance_Item__c> workPartList = new list<Equipment_Maintenance_Item__c>();
    list<case> requestList = new list<case>();
    list<id> oldRequestIds = new list<id>();
    
    // Creating 300 vehicles and equipment objects and inserting them
    for(integer i = 0; i < 300; i++){
       vehicleList.add(createVehicle());
        equipmentList.add(createEq());
    }
    insert vehicleList;
    insert equipmentList;
    
    // Creating 300 maintenance request cases for each vehicle and equipment object
    for(integer i = 0; i < 300; i++){
        requestList.add(createMaintenanceRequest(vehicleList.get(i).id, equipmentList.get(i).id));
    }
    insert requestList;
    
    // Creating 300 work parts for each equipment and request pair
    for(integer i = 0; i < 300; i++){
        workPartList.add(createWorkPart(equipmentList.get(i).id, requestList.get(i).id));
    }
    insert workPartList;
    
    // Updating the status of all maintenance requests to closed and adding their IDs to a list
    test.startTest();
    for(case req : requestList){
        req.Status = CLOSED;
        oldRequestIds.add(req.Id);
    }
    update requestList;
    test.stopTest();
    
    // Querying for all requests with a status of 'New' and work parts with the IDs of the closed requests
    list<case> allRequests = [select id
                             from case
                             where status =: STATUS_NEW];
    
    list<Equipment_Maintenance_Item__c> workParts = [select id
                                                    from Equipment_Maintenance_Item__c
                                                    where Maintenance_Request__c in: oldRequestIds];
    
    // Asserting that there are no requests with a status of 'New'
    system.assert(allRequests.size() == 300);
}
